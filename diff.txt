diff --git a/.gitignore b/.gitignore
index 96b68b8..b51a2d7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,6 +4,7 @@ __MACOSX/
 
 # Ignore environment files
 .env
+!.env.example
 
 # Ignore Traefik certificates
 traefik/certificates/acme.json
@@ -15,3 +16,7 @@ docker-compose.override.yml
 # Ignore sensitive data
 *.key
 *.pem
+
+
+# Ignore traefik yml files
+traefik/*.yml
\ No newline at end of file
diff --git a/docker/.env.example b/docker/.env.example
index 530964c..1c5630b 100644
--- a/docker/.env.example
+++ b/docker/.env.example
@@ -3,47 +3,44 @@
 #######################
 
 # Base directories
-DATA_DIR=/Volumes/Plex/docker/data
-PLEX_DIR=/Volumes/Plex/
+DATA_DIR=/path/to/your/docker/data
+PLEX_DIR=/path/to/your/plex/media
 
 ######################
 # USER/GROUP CONFIG #
 ######################
 
 # System user/group IDs (run 'id' command to get these)
-PUID=501
-PGID=20
+PUID=1000
+PGID=1000
 
 #######################
 # DOMAIN SETTINGS #
 #######################
 
 # Domain and SSL configuration
-DOMAIN=yourdomain.com
-LETSENCRYPT_EMAIL=your-email@example.com
+DOMAIN=example.com
+LETSENCRYPT_EMAIL=your@email.com
 
 ######################
 # SECURITY SETTINGS #
 ######################
 
-# Access control
-ALLOWED_IPS=127.0.0.1/32,10.0.0.0/8,192.168.0.0/16
-
-# Application secrets
-WEBUI_SECRET_KEY=generate_a_random_key_here
+# Access control white list for Traefik (comma-separated IP ranges)
+IP_ALLOW_LIST=127.0.0.1/32,192.168.1.0/24,10.0.0.0/8
 
 ######################
 # DATABASE SETTINGS #
 ######################
 
 # MySQL credentials
-MYSQL_ROOT_PASSWORD=generate_strong_password_here
-MYSQL_DATABASE=default_database
-MYSQL_USER=default_user
-MYSQL_PASSWORD=generate_strong_password_here
+MYSQL_ROOT_PASSWORD=your_secure_password_here
+MYSQL_DATABASE=your_database_name
+MYSQL_USER=your_database_user
+MYSQL_PASSWORD=your_database_password
 
 ######################
 # TIMEZONE SETTINGS #
 ######################
 
-TZ=America/Chicago 
\ No newline at end of file
+TZ=America/New_York
diff --git a/docker/docker-compose.yml b/docker/docker-compose.yml
index 0eea0e2..825738a 100644
--- a/docker/docker-compose.yml
+++ b/docker/docker-compose.yml
@@ -1,10 +1,25 @@
-version: '3'
-
 services:
   #############
   # PLEX APPS #
   #############
-  
+
+  bazarr:
+    image: 'lscr.io/linuxserver/bazarr:latest'
+    container_name: 'bazarr'
+    restart: unless-stopped
+    environment:
+      PGID: '${PGID}'
+      PUID: '${PUID}'
+      TZ: '${TZ}'
+    ports:
+      - "6767:6767"
+    volumes:
+      - '${DATA_DIR}/bazarr/config:/config'
+    networks:
+      - traefik-proxy
+    labels:
+      - com.centurylinklabs.watchtower.enable=true
+
   lidarr:
     image: 'lscr.io/linuxserver/lidarr:latest'
     container_name: 'lidarr'
@@ -77,6 +92,21 @@ services:
     labels:
       - com.centurylinklabs.watchtower.enable=true
 
+  prowlarr:
+    image: 'lscr.io/linuxserver/prowlarr:latest'
+    container_name: 'prowlarr'
+    restart: unless-stopped
+    environment:
+      PGID: '${PGID}'
+      PUID: '${PUID}'
+      TZ: '${TZ}'
+    ports:
+      - "9696:9696"
+    volumes:
+      - '${DATA_DIR}/prowlarr/config:/config'
+    networks:
+      - traefik-proxy
+
   radarr:
     image: 'lscr.io/linuxserver/radarr:latest'
     container_name: 'radarr'
@@ -155,7 +185,7 @@ services:
     restart: unless-stopped
     environment:
       OLLAMA_BASE_URL: 'http://ollama:11434'
-      WEBUI_SECRET_KEY: '${WEBUI_SECRET_KEY}'
+      # WEBUI_SECRET_KEY: '${WEBUI_SECRET_KEY}'
       TZ: '${TZ}'
     ports:
       - "8082:8080"
@@ -178,6 +208,7 @@ services:
       PGID: '${PGID}'
       PUID: '${PUID}'
       TZ: '${TZ}'
+      APP_URL: 'https://heimdall.${DOMAIN}'
     ports:
       - "8282:80"
     volumes:
@@ -222,13 +253,14 @@ services:
       - com.centurylinklabs.watchtower.enable=true
 
   mysql:
-    image: mysql:latest
+    # Version 8.4.0 is the latest version that I was able to get Ombi to work with - 2025-07-04
+    image: mysql:8.4.0
     container_name: 'mysql'
     environment:
       MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
-      MYSQL_DATABASE: '${MYSQL_DATABASE}'
-      MYSQL_USER: '${MYSQL_USER}'
-      MYSQL_PASSWORD: '${MYSQL_PASSWORD}'
+      # MYSQL_DATABASE: '${MYSQL_DATABASE}'
+      # MYSQL_USER: '${MYSQL_USER}'
+      # MYSQL_PASSWORD: '${MYSQL_PASSWORD}'
       TZ: '${TZ}'
     ports: 
       - "3306:3306"
@@ -246,16 +278,138 @@ services:
     restart: unless-stopped
     environment:
       TZ: '${TZ}'
+      PMA_HOST: 'mysql'
+      # PMA_PORT: '3306'
+      # PMA_USER: 'root'
+      # PMA_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
+      # PMA_ARBITRARY: '1'
     ports:
       - "8083:80"
+    # volumes:
+    #   - '${DATA_DIR}/phpmyadmin/data/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php'
+    networks:
+      - traefik-proxy
+    labels:
+      - com.centurylinklabs.watchtower.enable=true
+
+  ###########
+  # UTILITIES #
+  ###########
+
+  portainer:
+    image: portainer/portainer-ce:latest
+    container_name: 'portainer'
+    restart: unless-stopped
+    ports:
+      - "9000:9000"
     volumes:
-      - '${DATA_DIR}/phpmyadmin/data/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php'
+      - '${DATA_DIR}/portainer/data:/data'
+      - /var/run/docker.sock:/var/run/docker.sock
     networks:
       - traefik-proxy
     labels:
       - com.centurylinklabs.watchtower.enable=true
 
+  portainer-agent:
+    image: portainer/agent:latest
+    container_name: 'portainer-agent'
+    restart: unless-stopped
+    ports:
+      - "9443:9443"
+    volumes:
+      - /var/run/docker.sock:/var/run/docker.sock
+    networks:
+      - traefik-proxy
+    labels:
+      - com.centurylinklabs.watchtower.enable=true
+
+  # bookstack:
+  #   image: linuxserver/bookstack:latest
+  #   container_name: 'bookstack'
+  #   restart: unless-stopped
+  #   environment:
+  #     TZ: '${TZ}'
+  #   ports:
+  #     - "8085:80"
+  #   volumes:
+  #     - '${DATA_DIR}/bookstack/config:/config'
+  #   networks:
+  #     - traefik-proxy
+  #   labels:
+  #     - com.centurylinklabs.watchtower.enable=true
+  
+  watchtower:
+    image: containrrr/watchtower:latest
+    container_name: 'watchtower'  
+    restart: unless-stopped
+    environment:
+      TZ: '${TZ}'
+      WATCHTOWER_CLEANUP: 'true'
+      WATCHTOWER_POLL_INTERVAL: '3600'
+      WATCHTOWER_gsLABEL_ENABLE: 'true'
+    volumes:
+      - /var/run/docker.sock:/var/run/docker.sock
+    networks:
+      - traefik-proxy
+    labels:
+      - com.centurylinklabs.watchtower.enable=true
+
+  uptime-kuma:
+    image: louislam/uptime-kuma:latest
+    container_name: 'uptime-kuma'
+    restart: unless-stopped
+    ports:
+      - "3001:3001"
+    volumes:
+      - '${DATA_DIR}/uptime-kuma:/app/data'
+    networks:
+      - traefik-proxy
+    labels:
+      - com.centurylinklabs.watchtower.enable=true
+
+  it-tools:
+    image: corentinth/it-tools:latest
+    container_name: 'it-tools'
+    restart: unless-stopped
+    environment:
+      TZ: '${TZ}'
+    ports:
+      - "8084:80"
+    volumes:
+      - '${DATA_DIR}/it-tools/data:/app/data'
+    networks:
+      - traefik-proxy
+    labels:
+      - com.centurylinklabs.watchtower.enable=true
+
+  ###########
+  # MONITORING #
+  ###########
+
+  grafana:
+    image: grafana/grafana:latest
+    container_name: 'grafana'
+    restart: unless-stopped
+    ports:
+      - "3000:3000"
+    volumes:
+      - '${DATA_DIR}/grafana/data:/var/lib/grafana'
+    networks:
+      - traefik-proxy
+
+  prometheus:
+    image: prom/prometheus:latest
+    container_name: 'prometheus'
+    restart: unless-stopped
+    ports:
+      - "9090:9090"
+    volumes:
+      - '${DATA_DIR}/prometheus/data:/prometheus'
+    networks:
+      - traefik-proxy
+
 networks:
   traefik-proxy:
     name: traefik-proxy
-    driver: bridge
\ No newline at end of file
+    driver: bridge
+
diff --git a/install.sh b/install.sh
deleted file mode 100644
index e880cfb..0000000
--- a/install.sh
+++ /dev/null
@@ -1,63 +0,0 @@
-#!/bin/bash
-
-# Colors for output
-RED='\033[0;31m'
-GREEN='\033[0;32m'
-YELLOW='\033[1;33m'
-NC='\033[0m' # No Color
-
-# Function to print status messages
-print_status() {
-    echo -e "${YELLOW}[*] $1${NC}"
-}
-
-print_success() {
-    echo -e "${GREEN}[+] $1${NC}"
-}
-
-print_error() {
-    echo -e "${RED}[-] $1${NC}"
-}
-
-# Check if Homebrew is installed
-if ! command -v brew &> /dev/null; then
-    print_status "Installing Homebrew..."
-    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
-else
-    print_success "Homebrew already installed"
-fi
-
-# Install required packages
-print_status "Installing required packages..."
-brew install --cask docker plex-media-server
-brew install traefik docker-clean docker-completion docker-compose
-
-# Create necessary directories
-print_status "Creating directory structure..."
-sudo mkdir -p /private/etc/traefik/certificates
-mkdir -p ~/Documents/mac_plex/{docker,traefik,scripts}
-
-# Copy configuration files
-print_status "Copying configuration files..."
-sudo cp ./traefik/traefik.yml /private/etc/traefik/
-sudo cp ./traefik/dynamic.yml /private/etc/traefik/
-sudo touch /private/etc/traefik/certificates/acme.json
-sudo chmod 600 /private/etc/traefik/certificates/acme.json
-
-# Setup Traefik LaunchAgent
-print_status "Setting up Traefik LaunchAgent..."
-cp ./traefik/com.traefik.startup.plist ~/Library/LaunchAgents/
-launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
-
-# Copy Docker configuration
-print_status "Setting up Docker configuration..."
-cp ./docker/.env ~/Documents/mac_plex/docker/
-cp ./docker/docker-compose.yml ~/Documents/mac_plex/docker/
-
-# Start services
-print_status "Starting services..."
-open -a Docker
-open -a Plex\ Media\ Server
-
-print_success "Installation complete!"
-print_status "Please check the readme.md file for post-installation steps." 
\ No newline at end of file
diff --git a/readme.md b/readme.md
index d8b3aeb..32d2dff 100644
--- a/readme.md
+++ b/readme.md
@@ -1,118 +1,555 @@
-# Mac Plex Media Server Setup
-
-This repository contains the configuration and setup scripts for running a Plex Media Server on macOS with Docker containers for supporting services and Traefik as a reverse proxy.
+# Mac Plex Server Setup
+
+A complete Docker-based Plex media server setup for macOS with Traefik reverse proxy, SSL certificates, and a comprehensive media management stack.
+
+## Features
+
+- **Traefik Reverse Proxy** with automatic SSL certificates via Let's Encrypt
+- **Plex Media Server** with supporting applications:
+  - Sonarr (TV Shows)
+  - Radarr (Movies)
+  - Lidarr (Music)
+  - Bazarr (Subtitles)
+  - Prowlarr (Indexer Management)
+  - NZBGet (Downloader)
+  - Overseerr (Request Management)
+  - Ombi (Alternative Request Management)
+  - Tautulli (Plex Analytics)
+- **AI Tools** with Ollama and Open WebUI
+- **Dashboards** with Heimdall and Organizr
+- **Database** with MySQL, phpMyAdmin, and Adminer
+- **Monitoring** with Grafana and Prometheus
+- **Utilities** with Portainer, IT-Tools, and Uptime Kuma
 
 ## Prerequisites
 
-- macOS (tested on Apple Silicon)
-- Administrative access
-- Command line tools (`xcode-select --install`)
+- **macOS** (tested on macOS 14+)
+- **Domain name** with DNS pointing to your server's public IP
+- **Router configuration** with ports 80 and 443 forwarded to your Mac
+- **Basic terminal knowledge** (copy/paste commands)
+
+**Note**: Homebrew and Docker Desktop will be installed automatically by the install script.
+
+## Quick Start (TL;DR)
 
-## Quick Start
+For experienced users who want the quick version:
 
-1. Clone this repository:
 ```bash
-git clone https://github.com/yourusername/mac_plex.git
+# 1. Clone and install
+git clone <repository-url>
 cd mac_plex
+chmod +x scripts/install.sh && ./scripts/install.sh
+
+# 2. Configure
+cp docker/.env.example docker/.env
+nano docker/.env  # Edit DOMAIN, EMAIL, PATHS, IPs
+source docker/.env
+
+# 3. Start
+launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
+cd docker && docker-compose up -d
+
+# 4. Access
+open https://heimdall.yourdomain.com
 ```
 
-2. Run the installation script:
+## Detailed Installation Guide
+
+Follow these steps carefully to set up your Mac Plex Server:
+
+**⏱️ Total Time**: 15-30 minutes (depending on internet speed)
+**💾 Disk Space**: ~2GB for applications, plus your media storage
+**🔧 What You'll Get**: 20+ applications running with SSL certificates and dashboard access
+
+### Step 1: Clone the Repository
 ```bash
-chmod +x install.sh
-./install.sh
+git clone <repository-url>
+cd mac_plex
 ```
 
-## Manual Installation
+### Step 2: Run the Installation Script
+This script will install all prerequisites (Homebrew, Docker, Traefik, etc.) and set up the basic structure:
 
-If you prefer to install components manually, follow these steps:
+```bash
+chmod +x scripts/install.sh
+./scripts/install.sh
+```
+
+The script will:
+- Install Homebrew (if not already installed)
+- Install Docker Desktop, Plex Media Server, and Traefik
+- Create necessary directories and certificates
+- Set up the Traefik LaunchAgent for automatic startup
+- Backup any existing configuration files
 
-### 1. Install Required Software
+### Step 3: Configure Your Environment
+Now you need to create and customize your environment configuration:
 
 ```bash
-# Install Homebrew
-/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
+# Copy the template to create your actual configuration
+cp docker/.env.example docker/.env
 
-# Install Docker Desktop
-brew install --cask docker
-brew install docker-clean docker-completion docker-compose
+# Edit the configuration file
+nano docker/.env
+```
 
-# Install Plex Media Server
-brew install --cask plex-media-server
+**IMPORTANT**: You must update ALL the following variables in your `.env` file:
 
-# Install Traefik
-brew install traefik
+#### 🏠 **Directory Settings**
+```bash
+# Where Docker will store all application data
+DATA_DIR=/path/to/your/docker/data
+# Where your media files are stored
+PLEX_DIR=/path/to/your/plex/media
 ```
 
-### 2. Configure Traefik
+#### 👤 **User/Group Settings**
+```bash
+# Get your user ID and group ID by running: id
+PUID=1000  # Replace with your actual user ID
+PGID=1000  # Replace with your actual group ID
+```
 
-Traefik configuration files are stored in `/private/etc/traefik/`:
-- `traefik.yml`: Main configuration
-- `dynamic.yml`: Dynamic routing configuration
-- `certificates/acme.json`: SSL certificates
+#### 🌐 **Domain Settings**
+```bash
+# Your domain name (must point to your server's IP)
+DOMAIN=example.com
+# Your email for Let's Encrypt SSL certificates
+LETSENCRYPT_EMAIL=your@email.com
+```
 
-### 3. Configure Docker
+#### 🔒 **Security Settings**
+```bash
+# IP ranges allowed to access your services (comma-separated)
+# Include your local networks and any remote IPs you want to allow
+IP_ALLOW_LIST=127.0.0.1/32,192.168.1.0/24,10.0.0.0/8
+```
 
-Docker configuration files are stored in `~/Documents/mac_plex/docker/`:
-- `docker-compose.yml`: Service definitions
-- `.env`: Environment variables
+#### 🗄️ **Database Settings**
+```bash
+# Create secure passwords for MySQL
+MYSQL_ROOT_PASSWORD=your_secure_password_here
+MYSQL_DATABASE=your_database_name
+MYSQL_USER=your_database_user
+MYSQL_PASSWORD=your_database_password
+```
+
+#### 🕐 **Timezone Settings**
+```bash
+# Set your timezone (find yours at: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
+TZ=America/New_York
+```
 
-## Directory Structure
+### Step 4: Source Your Environment (Important!)
+After saving your `.env` file, source it so the variables are available:
 
+```bash
+source docker/.env
 ```
-mac_plex/
-├── docker/
-│   ├── .env
-│   └── docker-compose.yml
-├── traefik/
-│   ├── certificates/
-│   ├── traefik.yml
-│   └── dynamic.yml
-├── scripts/
-│   └── backup.sh
-├── install.sh
-└── readme.md
+
+### Step 5: Start Traefik Reverse Proxy
+Traefik will automatically generate SSL certificates and handle routing:
+
+```bash
+launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
 ```
 
-## Post-Installation
+**Wait 30-60 seconds** for Traefik to start and generate configuration files.
+
+### Step 6: Start All Docker Services
+Finally, start all your media server applications:
+
+```bash
+cd docker
+docker-compose up -d
+```
 
-1. Configure Plex Media Server:
-   - Open Plex Web App at http://localhost:32400/web
-   - Follow the setup wizard
+### Step 7: Verify Everything is Running
+Check that all services are running:
+
+```bash
+# Check Traefik is running
+launchctl list | grep traefik
+
+# Check Docker containers are running
+docker-compose ps
+
+# Check Traefik logs for any issues
+tail -f /tmp/traefik.log
+```
 
-2. Configure your media directories in Plex:
-   - Movies: `/Volumes/Plex/Movies`
-   - TV Shows: `/Volumes/Plex/TV Shows`
-   - Music: `/Volumes/Plex/Music`
+### Step 8: Access Your Services
+Your services should now be available at:
+- **Traefik Dashboard**: `https://traefik.yourdomain.com`
+- **Heimdall Dashboard**: `https://heimdall.yourdomain.com` (recommended starting point)
+- **Plex**: `https://plex.yourdomain.com`
+- **All other services**: `https://servicename.yourdomain.com`
+
+## First-Time Setup
+
+After installation, you'll need to configure each service:
+
+1. **Start with Heimdall** (`https://heimdall.yourdomain.com`) - This is your dashboard
+2. **Configure Plex** (`https://plex.yourdomain.com`) - Set up your media libraries
+3. **Set up Sonarr/Radarr** for TV shows and movies
+4. **Configure Prowlarr** for indexer management
+5. **Set up Overseerr** for media requests
+
+## What's Included
+
+Your Mac Plex Server includes these applications:
 
-3. Verify Traefik is running:
-   - Check dashboard at https://traefik.yourdomain.com
-   - Verify SSL certificates are working
+### 🎬 **Media Management**
+- **Plex Media Server** - Stream your media anywhere
+- **Sonarr** - Automatic TV show downloading and management
+- **Radarr** - Automatic movie downloading and management
+- **Lidarr** - Music collection management
+- **Bazarr** - Subtitle management for movies and TV shows
 
-## Maintenance
+### 🔍 **Download Management**
+- **Prowlarr** - Indexer management (finds content)
+- **NZBGet** - Usenet downloader
+- **Overseerr** - Media request management (users can request content)
+- **Ombi** - Alternative media request platform
 
-- Backup script: `scripts/backup.sh`
-- Logs: Check Docker Desktop or `/tmp/traefik.log`
-- Updates: Run `brew update && brew upgrade`
+### 📊 **Monitoring & Analytics**
+- **Tautulli** - Plex usage analytics and statistics
+- **Grafana** - System monitoring dashboards
+- **Prometheus** - Metrics collection
+- **Uptime Kuma** - Service uptime monitoring
+
+### 🤖 **AI & Automation**
+- **Ollama** - Local AI language models
+- **Open WebUI** - Web interface for AI chat
+- **Watchtower** - Automatic Docker container updates
+
+### 🛠️ **Management & Utilities**
+- **Heimdall** - Application dashboard (start here!)
+- **Organizr** - Alternative dashboard
+- **Portainer** - Docker container management
+- **IT-Tools** - Collection of useful web tools
+
+### 🗄️ **Database**
+- **MySQL** - Database server
+- **phpMyAdmin** - Web-based MySQL administration
+- **Adminer** - Lightweight database management
+
+### 🔐 **Security & Networking**
+- **Traefik** - Reverse proxy with automatic SSL certificates
+- **IP Whitelisting** - Restrict access to your specified networks
+- **Let's Encrypt** - Free SSL certificates for all services
+
+## Usage
+
+### Accessing Services
+
+Once everything is running, you can access your services at:
+
+- **Traefik Dashboard**: `https://traefik.yourdomain.com`
+- **Heimdall Dashboard**: `https://heimdall.yourdomain.com`
+- **Plex**: `https://plex.yourdomain.com` (or local access)
+- **Sonarr**: `https://sonarr.yourdomain.com`
+- **Radarr**: `https://radarr.yourdomain.com`
+- **Overseerr**: `https://overseerr.yourdomain.com`
+- **Portainer**: `https://portainer.yourdomain.com`
+
+### Managing Traefik
+
+- **Restart Traefik:**
+  ```bash
+  launchctl unload ~/Library/LaunchAgents/com.traefik.startup.plist
+  launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
+  ```
+
+- **View Traefik logs:**
+  ```bash
+  tail -f /tmp/traefik.log
+  tail -f /tmp/traefik.error.log
+  ```
+
+### Managing Docker Services
+
+- **Start all services:**
+  ```bash
+  cd docker && docker-compose up -d
+  ```
+
+- **Stop all services:**
+  ```bash
+  cd docker && docker-compose down
+  ```
+
+- **View service logs:**
+  ```bash
+  cd docker && docker-compose logs -f [service-name]
+  ```
+
+## Configuration
+
+### How the Template System Works
+
+This setup uses an intelligent template-based configuration system that automatically configures everything based on your `.env` file:
+
+1. **When you source your `.env` file**, all variables become available to the system
+2. **When Traefik starts**, it automatically runs the `apply-config.sh` script
+3. **The script generates configuration files** by replacing placeholders in templates:
+   - `traefik/traefik.yml.template` → `traefik/traefik.yml` (main Traefik config)
+   - `traefik/dynamic.yml.template` → `traefik/dynamic.yml` (routes and middleware)
+   - `LaunchAgents/com.traefik.startup.plist.template` → `~/Library/LaunchAgents/com.traefik.startup.plist`
+
+This means **you never need to manually edit configuration files** - just update your `.env` file and restart Traefik!
+
+### Network Security Explained
+
+The setup includes IP whitelisting middleware that restricts access to your services:
+
+- **HTTP Services** (web interfaces): Only IPs in `IP_ALLOW_LIST` can access
+- **TCP Services** (like MySQL): Same IP restrictions apply
+- **Example IP ranges**:
+  - `127.0.0.1/32` - Only localhost
+  - `192.168.1.0/24` - Your local network (192.168.1.1-192.168.1.254)
+  - `10.0.0.0/8` - Larger private network range
+  - `76.123.45.67/32` - Specific remote IP address
+
+### SSL Certificates (Automatic!)
+
+- **Automatic Generation**: Let's Encrypt certificates are automatically created for all your services
+- **Automatic Renewal**: Certificates are renewed before expiration
+- **Storage**: Certificates are stored in `traefik/certificates/acme.json`
+- **Backup**: The install script automatically backs up existing certificates
+
+### Adding New Services
+
+To add a new Docker service:
+
+1. **Add to `docker/docker-compose.yml`**:
+   ```yaml
+   myservice:
+     image: myservice:latest
+     ports:
+       - "8080:80"
+     networks:
+       - traefik-proxy
+   ```
+
+2. **Add route to `traefik/dynamic.yml.template`**:
+   ```yaml
+   myservice:
+     rule: "Host(`myservice.${DOMAIN}`)"
+     entryPoints:
+       - websecure
+     service: myservice-service
+     tls:
+       certResolver: le
+     middlewares:
+       - all-ipwhitelist
+   ```
+
+3. **Add service definition**:
+   ```yaml
+   myservice-service:
+     loadBalancer:
+       servers:
+         - url: "http://localhost:8080"
+   ```
+
+4. **Restart Traefik** to apply changes:
+   ```bash
+   launchctl unload ~/Library/LaunchAgents/com.traefik.startup.plist
+   launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
+   ```
+
+### Changing Configuration
+
+- **Domain or Email**: Update `.env` file and restart Traefik
+- **IP Restrictions**: Update `IP_ALLOW_LIST` in `.env` file and restart Traefik
+- **Data Directories**: Update `.env` file and restart Docker containers
+- **Ports**: Edit `docker/docker-compose.yml` and restart containers
+
+## Backup
+
+Use the provided backup script:
+
+```bash
+./scripts/backup.sh
+```
+
+This will backup:
+- Plex configuration
+- Docker volumes
+- Traefik configuration
 
 ## Troubleshooting
 
-Common issues and solutions:
+### Common Issues and Solutions
 
-1. Traefik not starting:
+#### 🚨 **"Permission Denied" Error**
 ```bash
-launchctl unload ~/Library/LaunchAgents/com.traefik.startup.plist
-launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
+# Problem: ./scripts/install.sh gives permission denied
+# Solution: Make the script executable
+chmod +x scripts/install.sh
+./scripts/install.sh
+```
+
+#### 🚨 **"Domain Not Accessible" Error**
+```bash
+# Problem: Can't access https://yourservice.yourdomain.com
+# Solutions:
+1. Check your domain DNS points to your server IP
+2. Verify your router forwards ports 80 and 443 to your Mac
+3. Check if your .env file is properly sourced:
+   source docker/.env
+4. Restart Traefik:
+   launchctl unload ~/Library/LaunchAgents/com.traefik.startup.plist
+   launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
+```
+
+#### 🚨 **"Certificate Error" or "SSL Error"**
+```bash
+# Problem: SSL certificate issues
+# Solutions:
+1. Wait 2-3 minutes for Let's Encrypt to generate certificates
+2. Check Traefik logs for certificate errors:
+   tail -f /tmp/traefik.log
+3. Verify your domain and email in .env file
+4. Check if port 80 is accessible from the internet (required for Let's Encrypt)
+```
+
+#### 🚨 **"Docker Container Won't Start"**
+```bash
+# Problem: Docker containers failing to start
+# Solutions:
+1. Check if Docker Desktop is running
+2. Verify your .env file paths exist:
+   ls -la $DATA_DIR
+   ls -la $PLEX_DIR
+3. Check container logs:
+   cd docker && docker-compose logs [service-name]
+4. Restart specific service:
+   cd docker && docker-compose restart [service-name]
+```
+
+#### 🚨 **"IP Address Blocked"**
+```bash
+# Problem: Can't access services (IP whitelist blocking you)
+# Solutions:
+1. Check your current IP:
+   curl ifconfig.me
+2. Add your IP to .env file:
+   IP_ALLOW_LIST=127.0.0.1/32,192.168.1.0/24,YOUR.IP.ADDRESS/32
+3. Source the file and restart Traefik:
+   source docker/.env
+   launchctl unload ~/Library/LaunchAgents/com.traefik.startup.plist
+   launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
+```
+
+### Diagnostic Commands
+
+#### **Check System Status**
+```bash
+# Check if Traefik is running
+launchctl list | grep traefik
+
+# Check Docker containers
+cd docker && docker-compose ps
+
+# Check Traefik logs
+tail -f /tmp/traefik.log
+
+# Check for errors
+tail -f /tmp/traefik.error.log
+```
+
+#### **Verify Configuration**
+```bash
+# Check if templates were processed correctly
+ls -la traefik/*.yml
+
+# Verify domain substitution worked
+head -n 10 traefik/dynamic.yml
+
+# Check if .env is properly formatted
+cat docker/.env
+```
+
+#### **Network Diagnostics**
+```bash
+# Test if services respond locally
+curl -I http://localhost:8282  # Heimdall
+curl -I http://localhost:9000  # Portainer
+
+# Test SSL certificate
+openssl s_client -connect yourdomain.com:443 -servername traefik.yourdomain.com
 ```
 
-2. Docker containers not accessible:
-- Check Docker Desktop is running
-- Verify network settings
-- Check Traefik logs
+### Getting Help
+
+If you're still having issues:
+
+1. **Check the logs first**:
+   ```bash
+   tail -f /tmp/traefik.log
+   cd docker && docker-compose logs
+   ```
+
+2. **Verify your setup**:
+   - Domain DNS points to your server
+   - Ports 80 and 443 are forwarded to your Mac
+   - `.env` file is properly configured and sourced
+   - All required directories exist
+
+3. **Try a clean restart**:
+   ```bash
+   # Stop everything
+   cd docker && docker-compose down
+   launchctl unload ~/Library/LaunchAgents/com.traefik.startup.plist
+   
+   # Start everything
+   source docker/.env
+   launchctl load ~/Library/LaunchAgents/com.traefik.startup.plist
+   sleep 30
+   cd docker && docker-compose up -d
+   ```
+
+4. **Still stuck?** Open an issue on GitHub with:
+   - Your `.env` file (remove sensitive passwords)
+   - Traefik logs (`/tmp/traefik.log`)
+   - Docker logs (`docker-compose logs`)
+   - Your macOS version and setup details
+
+## File Structure
+
+```
+mac_plex/
+├── docker/
+│   ├── .env.example          # Environment configuration template
+│   └── docker-compose.yml    # Docker services configuration
+├── scripts/
+│   ├── install.sh           # Installation script
+│   ├── apply-config.sh      # Configuration template processor
+│   └── backup.sh            # Backup script
+├── traefik/
+│   ├── traefik.yml.template # Traefik main configuration template
+│   ├── dynamic.yml.template # Traefik dynamic configuration template
+│   └── certificates/        # SSL certificates directory
+└── README.md               # This file
+```
 
 ## Contributing
 
-Feel free to submit issues and pull requests.
+1. Fork the repository
+2. Create a feature branch
+3. Make your changes
+4. Test thoroughly
+5. Submit a pull request
 
 ## License
 
-MIT 
\ No newline at end of file
+This project is licensed under the MIT License - see the LICENSE file for details.
+
+## Support
+
+For issues and questions:
+1. Check the troubleshooting section above
+2. Review the logs for error messages
+3. Open an issue on GitHub with detailed information about your setup and the problem 
\ No newline at end of file
diff --git a/scripts/backup.sh b/scripts/backup.sh
old mode 100644
new mode 100755
diff --git a/setup.sh b/setup.sh
deleted file mode 100644
index 57d0951..0000000
--- a/setup.sh
+++ /dev/null
@@ -1,3 +0,0 @@
-#!/bin/bash
-mkdir -p mac_plex/{docker,traefik,scripts}
-mkdir -p mac_plex/traefik/certificates 
\ No newline at end of file
diff --git a/traefik/com.traefik.startup.plist b/traefik/com.traefik.startup.plist
deleted file mode 100644
index 813f189..0000000
--- a/traefik/com.traefik.startup.plist
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
-<plist version="1.0">
-<dict>
-    <key>Label</key>
-    <string>com.traefik.startup</string>
-    <key>ProgramArguments</key>
-    <array>
-        <string>/bin/sh</string>
-        <string>-c</string>
-        <string>source /private/etc/traefik/.env && exec /usr/local/bin/traefik</string>
-    </array>
-    <key>RunAtLoad</key>
-    <true/>
-    <key>KeepAlive</key>
-    <true/>
-    <key>StandardOutPath</key>
-    <string>/tmp/traefik.log</string>
-    <key>StandardErrorPath</key>
-    <string>/tmp/traefik.error.log</string>
-    <key>WorkingDirectory</key>
-    <string>/private/etc/traefik</string>
-</dict>
-</plist> 
\ No newline at end of file
